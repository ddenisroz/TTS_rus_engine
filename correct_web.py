#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è F5-TTS —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
"""

import gradio as gr
import tempfile
import os
import logging
from pathlib import Path
from correct_tts import CorrectTTS
import whisper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CorrectTTSWebInterface:
    def __init__(self):
        self.tts = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏
        self.whisper_model = None
        self.temp_dir = Path(tempfile.gettempdir()) / "f5tts_web"
        self.temp_dir.mkdir(exist_ok=True)
        self.current_model_type = "base"
        
    def load_whisper_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        if self.whisper_model is None:
            try:
                logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper...")
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ CPU —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å CUDA
                self.whisper_model = whisper.load_model("base", device="cpu")
                logger.info("–ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ CPU")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
                return False
        return True
    
    def transcribe_audio(self, audio_file):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
        if audio_file is None:
            return "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
        
        try:
            if not self.load_whisper_model():
                return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Whisper"
            
            logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {audio_file}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è Whisper —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å CUDA
            result = self.whisper_model.transcribe(audio_file)
            text = result["text"].strip()
            language = result["language"]
            
            logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {language}")
            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: '{text[:50]}...'")
            
            return f"–Ø–∑—ã–∫: {language}\n\n–¢–µ–∫—Å—Ç: {text}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}"
    
    def load_tts_model(self, model_type):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç TTS –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            if self.tts is None or self.current_model_type != model_type:
                logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º TTS –º–æ–¥–µ–ª—å: {model_type}")
                self.tts = CorrectTTS(model_type=model_type)
                self.current_model_type = model_type
                return f"‚úÖ –ú–æ–¥–µ–ª—å {model_type} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
            else:
                return f"‚úÖ –ú–æ–¥–µ–ª—å {model_type} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model_type}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}"

    def synthesize_speech(self, text, ref_audio, ref_text, model_type):
        """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å"""
        if not text or not ref_audio or not ref_text:
            return None, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.tts is None or self.current_model_type != model_type:
                self.load_tts_model(model_type)
            
            if not self.tts or not self.tts.f5tts:
                return None, "TTS –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            
            # ref_audio —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É (—Å—Ç—Ä–æ–∫–∞)
            ref_audio_path = str(ref_audio)
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
            logger.info(f"–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ ({model_type}): '{text[:50]}...'")
            output_path = self.tts.synthesize_speech(text, ref_audio_path, ref_text)
            
            if output_path:
                return output_path, f"–°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! (–º–æ–¥–µ–ª—å: {model_type})"
            else:
                return None, "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ synthesize_speech: {e}")
            return None, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}"
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        with gr.Blocks(title="F5-TTS Russian", theme=gr.themes.Soft()) as interface:
            gr.Markdown("""
            # üé§ F5-TTS Russian Voice Cloning
            
            **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
            - üó£Ô∏è –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ
            - üá∑üá∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            - üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
            - üéµ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
            - üîÑ –í—ã–±–æ—Ä –º–µ–∂–¥—É –±–∞–∑–æ–≤–æ–π –∏ accent-tuned –º–æ–¥–µ–ª—è–º–∏
            
            **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
            1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (Base –∏–ª–∏ Accent-tuned)
            2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ (–≥–æ–ª–æ—Å –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
            3. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ (—á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –≤ –∞—É–¥–∏–æ)
            4. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            5. –ù–∞–∂–º–∏—Ç–µ "–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å"
            """)
            
            with gr.Row():
                with gr.Column():
                    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
                    model_choice = gr.Radio(
                        choices=[
                            ("Base Model (F5TTS_v1_Base_v2)", "base"),
                            ("Accent-tuned Model (F5TTS_v1_Base_accent_tune)", "accent")
                        ],
                        value="base",
                        label="ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å TTS",
                        info="Base - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å, Accent-tuned - —É–ª—É—á—à–µ–Ω–Ω–∞—è –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤"
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
                    load_model_btn = gr.Button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", variant="secondary")
                    
                    # –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
                    model_status = gr.Textbox(
                        label="üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏",
                        value="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å'",
                        interactive=False
                    )
                    
                    # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ
                    ref_audio = gr.Audio(
                        label="üéµ –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ (–≥–æ–ª–æ—Å –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)",
                        type="filepath"
                    )
                    
                    # –¢–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ
                    ref_text = gr.Textbox(
                        label="üìù –¢–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—Å—è –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–º –∞—É–¥–∏–æ...",
                        lines=3
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    transcribe_btn = gr.Button("üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ", variant="secondary")
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    transcribe_output = gr.Textbox(
                        label="üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
                        lines=4,
                        interactive=False
                    )
                
                with gr.Column():
                    # –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
                    gen_text = gr.Textbox(
                        label="‚úçÔ∏è –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å...",
                        lines=5
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞
                    synthesize_btn = gr.Button("üéµ –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å", variant="primary")
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ç–µ–∑–∞
                    output_audio = gr.Audio(
                        label="üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ç–µ–∑–∞",
                        type="filepath"
                    )
                    
                    # –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ç–µ–∑–∞
                    status = gr.Textbox(
                        label="üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ç–µ–∑–∞",
                        value="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ",
                        interactive=False
                    )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            load_model_btn.click(
                fn=self.load_tts_model,
                inputs=[model_choice],
                outputs=[model_status]
            )
            
            transcribe_btn.click(
                fn=self.transcribe_audio,
                inputs=[ref_audio],
                outputs=[transcribe_output]
            )
            
            synthesize_btn.click(
                fn=self.synthesize_speech,
                inputs=[gen_text, ref_audio, ref_text, model_choice],
                outputs=[output_audio, status]
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            ref_audio.change(
                fn=self.transcribe_audio,
                inputs=[ref_audio],
                outputs=[transcribe_output]
            )
        
        return interface
    
    def launch(self, port=7862, share=False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        interface = self.create_interface()
        
        logger.info("–ó–∞–ø—É—Å–∫ F5-TTS –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        interface.launch(
            server_port=port,
            share=share,
            show_error=True,
            quiet=False
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        app = CorrectTTSWebInterface()
        app.launch(port=7862, share=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
