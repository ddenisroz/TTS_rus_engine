#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –æ–∑–≤—É—á–∫–∏
"""

from advanced_tts import AdvancedTTS
import os

def debug_text_sync():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TTS
    tts = AdvancedTTS(model_type="base", enable_accent=False)
    
    if not tts.multilingual_tts:
        print("‚ùå –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            "text": "Hello world",
            "ref_text": "This is a test"
        },
        {
            "name": "–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç",
            "text": "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä",
            "ref_text": "–≠—Ç–æ —Ç–µ—Å—Ç"
        },
        {
            "name": "–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
            "text": "Hello –ø—Ä–∏–≤–µ—Ç world –º–∏—Ä",
            "ref_text": "This is a test"
        },
        {
            "name": "–î–ª–∏–Ω–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            "text": "The quick brown fox jumps over the lazy dog",
            "ref_text": "This is a reference text for voice cloning"
        }
    ]
    
    ref_audio = "test_ref.wav"
    
    if not os.path.exists(ref_audio):
        print(f"‚ùå –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ref_audio}")
        return
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –æ–∑–≤—É—á–∫–∏")
    print(f"üéµ –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ: {ref_audio}")
    print()
    
    for i, case in enumerate(test_cases, 1):
        print(f"üß™ –¢–µ—Å—Ç {i}: {case['name']}")
        print(f"üìù –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: '{case['text']}'")
        print(f"üìÑ –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π —Ç–µ–∫—Å—Ç: '{case['ref_text']}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        language = tts.detect_language(case['text'])
        print(f"üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {language}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É
        processed_text = tts.preprocess_text_for_tts(case['text'])
        print(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{processed_text}'")
        
        try:
            output_path = tts.synthesize_speech(
                text=case['text'],
                ref_audio_path=ref_audio,
                ref_text=case['ref_text'],
                cross_fade_duration=0.15,
                speed=1.0,
                silence_duration_ms=200,
                target_rms=0.3,
                sway_sampling_coef=-1,
                cfg_strength=2,
                nfe_step=32,
                fix_duration=None,
                remove_silence=False,
                seed=None
            )
            
            if output_path and os.path.exists(output_path):
                file_size = os.path.getsize(output_path)
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path} ({file_size} bytes)")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 50)
        print()

if __name__ == "__main__":
    debug_text_sync()
