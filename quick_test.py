#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç F5-TTS
"""

import logging
import os
from correct_tts import CorrectTTS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞"""
    logger.info("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç F5-TTS")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS
        tts = CorrectTTS()
        
        if not tts.f5tts:
            logger.error("‚ùå F5-TTS –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ
        ref_audio = "test_ref.wav"
        if not os.path.exists(ref_audio):
            logger.error(f"‚ùå –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ref_audio}")
            logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é: python create_test_audio.py")
            return
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–Ω—Ç–µ–∑
        text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç F5-TTS —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º."
        ref_text = "–≠—Ç–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞."
        
        logger.info(f"–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º: '{text}'")
        
        output_path = tts.synthesize_speech(text, ref_audio, ref_text)
        
        if output_path and os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            logger.info(f"‚úÖ –£—Å–ø–µ—Ö! –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path} ({file_size} –±–∞–π—Ç)")
            logger.info("üéµ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    quick_test()
