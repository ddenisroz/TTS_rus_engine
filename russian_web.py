#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–π F5-TTS —Å–∏—Å—Ç–µ–º—ã
"""

import logging
import os
import tempfile
from pathlib import Path
import gradio as gr
import whisper

from russian_tts import RussianTTS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è PyTorch 2.4.0
os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "max_split_size_mb:128"


class RussianTTSWebInterface:
    def __init__(self):
        logger.info("–ó–∞–ø—É—Å–∫ —Ä—É—Å—Å–∫–æ–≥–æ F5-TTS –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TTS —Å —É–¥–∞—Ä–µ–Ω–∏—è–º–∏ (turbo –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.tts = RussianTTS(enable_accent=True, accent_model_size="turbo")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        self.whisper_model = None
        self.load_whisper_model()

    def load_whisper_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏."""
        try:
            logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper...")
            self.whisper_model = whisper.load_model("base", device="cpu")
            logger.info("Whisper –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
            self.whisper_model = None

    def transcribe_reference_audio(self, audio_file):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç."""
        if not audio_file:
            return ""
        
        if not self.whisper_model:
            return "Whisper –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {audio_file}")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            result = self.whisper_model.transcribe(audio_file)
            transcribed_text = result["text"].strip()
            
            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: '{transcribed_text[:100]}...'")
            return transcribed_text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}"

    def synthesize_speech(self, text, ref_audio, ref_text):
        """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
        if not text.strip():
            return None, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞"
        
        if not ref_audio:
            return None, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ"
        
        try:
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            output_path = self.tts.synthesize_speech(
                text=text,
                ref_audio_path=ref_audio,
                ref_text=ref_text
            )
            
            if output_path and Path(output_path).exists():
                return output_path, "‚úÖ –°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
            else:
                return None, "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ synthesize_speech: {e}")
            return None, f"‚ùå –û—à–∏–±–∫–∞: {e}"


    def create_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        with gr.Blocks(title="Multilingual F5-TTS", theme=gr.themes.Soft()) as interface:
            gr.Markdown("""
            # üé§ Multilingual F5-TTS Voice Cloning
            
            **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
            - üó£Ô∏è –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ
            - üá∑üá∫ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
            - üåç –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            - üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
            - üéµ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
            
            **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
            1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
            2. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ (—á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –≤ –∞—É–¥–∏–æ)
            3. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (—Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
            4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            5. –ù–∞–∂–º–∏—Ç–µ "–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å"
            """)
            
            with gr.Row():
                with gr.Column():
                    # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ
                    ref_audio = gr.Audio(
                        label="üéµ –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ",
                        type="filepath"
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    transcribe_btn = gr.Button("üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ", variant="secondary")
                    
                    # –¢–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ
                    ref_text = gr.Textbox(
                        label="üìÑ –¢–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–º –∞—É–¥–∏–æ...",
                        lines=2
                    )
                    
                    # –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
                    gen_text = gr.Textbox(
                        label="üìù –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å...",
                        lines=3
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞
                    synthesize_btn = gr.Button("üéµ –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å", variant="primary")
                
                with gr.Column():
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç
                    output_audio = gr.Audio(
                        label="üéß –†–µ–∑—É–ª—å—Ç–∞—Ç",
                        type="filepath"
                    )
                    
                    # –°—Ç–∞—Ç—É—Å
                    status = gr.Textbox(
                        label="üìä –°—Ç–∞—Ç—É—Å",
                        value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                        interactive=False
                    )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            gr.Markdown("""
            ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
            - –°–∫–æ—Ä–æ—Å—Ç—å: ‚â§3 —Å–∏–º–≤–æ–ª–æ–≤ = 0.1, 4-8 = 0.3, 9-16 = 0.6, 17-30 = 0.9, >30 = 1.0
            - NFE Steps: 26 –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤, 18 –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö (>120 —Å–∏–º–≤–æ–ª–æ–≤)
            - RUAccent: Turbo –º–æ–¥–µ–ª—å —Å tiny —Ä–µ–∂–∏–º–æ–º –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            - –¢–∏—à–∏–Ω–∞ –≤ –∫–æ–Ω—Ü–µ: 100–º—Å
            - –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            """)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            transcribe_btn.click(
                fn=self.transcribe_reference_audio,
                inputs=[ref_audio],
                outputs=[ref_text]
            )
            
            synthesize_btn.click(
                fn=self.synthesize_speech,
                inputs=[gen_text, ref_audio, ref_text],
                outputs=[output_audio, status]
            )
        
        return interface

    def launch(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        interface = self.create_interface()
        interface.launch(share=False, server_port=7864)


if __name__ == "__main__":
    app = RussianTTSWebInterface()
    app.launch()
