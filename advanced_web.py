#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è F5-TTS —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–¥–∞—Ä–µ–Ω–∏–π –∏ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
"""

import gradio as gr
import tempfile
import os
import logging
from pathlib import Path
from advanced_tts import AdvancedTTS
import whisper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AdvancedTTSWebInterface:
    def __init__(self):
        self.tts = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏
        self.whisper_model = None
        self.temp_dir = Path(tempfile.gettempdir()) / "f5tts_web"
        self.temp_dir.mkdir(exist_ok=True)
        self.current_model_type = "base"
        self.current_accent_enabled = True
        
    def load_whisper_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        if self.whisper_model is None:
            try:
                logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper...")
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ CPU —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å CUDA
                self.whisper_model = whisper.load_model("base", device="cpu")
                logger.info("–ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ CPU")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
                return False
        return True
    
    def transcribe_audio(self, audio_file):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
        if audio_file is None:
            return "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
        
        try:
            if not self.load_whisper_model():
                return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Whisper"
            
            logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {audio_file}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è Whisper —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å CUDA
            result = self.whisper_model.transcribe(audio_file)
            text = result["text"].strip()
            language = result["language"]
            
            logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {language}")
            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: '{text[:50]}...'")
            
            return f"–Ø–∑—ã–∫: {language}\n\n–¢–µ–∫—Å—Ç: {text}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}"
    
    def load_tts_model(self, model_type, enable_accent, accent_model_size, accent_use_dictionary, 
                      accent_tiny_mode, ode_method, use_ema):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç TTS –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            if (self.tts is None or 
                self.current_model_type != model_type or 
                self.current_accent_enabled != enable_accent):
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º TTS –º–æ–¥–µ–ª—å: {model_type}, —É–¥–∞—Ä–µ–Ω–∏—è: {enable_accent}")
                self.tts = AdvancedTTS(
                    model_type=model_type, 
                    enable_accent=enable_accent,
                    accent_model_size=accent_model_size,
                    accent_use_dictionary=accent_use_dictionary,
                    accent_tiny_mode=accent_tiny_mode,
                    ode_method=ode_method,
                    use_ema=use_ema
                )
                self.current_model_type = model_type
                self.current_accent_enabled = enable_accent
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                status_parts = []
                if self.tts.russian_tts:
                    status_parts.append("‚úÖ –†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å F5-TTS")
                if self.tts.accentizer:
                    status_parts.append(f"‚úÖ RUAccent (—É–¥–∞—Ä–µ–Ω–∏—è, —Ä–∞–∑–º–µ—Ä: {accent_model_size})")
                status_parts.append("‚úÖ –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –ª–∞—Ç–∏–Ω–∏—Ü—ã –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—É")
                
                status = f"–ú–æ–¥–µ–ª—å {model_type} –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\n" + "\n".join(status_parts)
                return status
            else:
                return f"‚úÖ –ú–æ–¥–µ–ª—å {model_type} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model_type}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}"

    def synthesize_speech(self, text, ref_audio, ref_text, model_type, enable_accent, 
                         cross_fade_duration, speed, silence_duration_ms, target_rms,
                         sway_sampling_coef, cfg_strength, nfe_step, fix_duration,
                         remove_silence, seed):
        """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å"""
        if not text or not ref_audio or not ref_text:
            return None, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (self.tts is None or 
                self.current_model_type != model_type or 
                self.current_accent_enabled != enable_accent):
                self.load_tts_model(model_type, enable_accent, "turbo2", True, False, "euler", True)
            
            if not self.tts:
                return None, "TTS –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            
            # ref_audio —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É (—Å—Ç—Ä–æ–∫–∞)
            ref_audio_path = str(ref_audio)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            fix_duration_val = None if fix_duration is None or fix_duration == "" or fix_duration == 0 else float(fix_duration)
            seed_val = None if seed is None or seed == "" or seed == 0 else int(seed)
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
            logger.info(f"–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ ({model_type}, —É–¥–∞—Ä–µ–Ω–∏—è: {enable_accent}): '{text[:50]}...'")
            output_path = self.tts.synthesize_speech(
                text, ref_audio_path, ref_text, 
                cross_fade_duration, speed, silence_duration_ms, target_rms,
                sway_sampling_coef, cfg_strength, nfe_step, fix_duration_val,
                remove_silence, seed_val
            )
            
            if output_path:
                return output_path, f"–°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! (–º–æ–¥–µ–ª—å: {model_type}, —É–¥–∞—Ä–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if enable_accent else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'})"
            else:
                return None, "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ synthesize_speech: {e}")
            return None, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}"
    
    def reset_to_defaults(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return (
            "base",      # model_type
            True,        # enable_accent
            "turbo2",    # accent_model_size
            True,        # accent_use_dictionary
            False,       # accent_tiny_mode
            "euler",     # ode_method
            True,        # use_ema
            0.15,        # cross_fade_duration
            1.0,         # speed
            200,         # silence_duration_ms
            0.3,         # target_rms
            -1,          # sway_sampling_coef
            2,           # cfg_strength
            32,          # nfe_step
            0,           # fix_duration
            False,       # remove_silence
            0            # seed
        )
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        with gr.Blocks(title="Advanced F5-TTS", theme=gr.themes.Soft()) as interface:
            gr.Markdown("""
            # üé§ Advanced F5-TTS Multilingual Voice Cloning
            
            **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
            - üó£Ô∏è –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ
            - üá∑üá∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É–¥–∞—Ä–µ–Ω–∏—è–º–∏
            - üî§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
            - üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
            - üéµ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
            - üîÑ –í—ã–±–æ—Ä –º–µ–∂–¥—É –±–∞–∑–æ–≤–æ–π –∏ accent-tuned –º–æ–¥–µ–ª—è–º–∏
            - ‚ö° –í—Å–µ —Ç–µ–∫—Å—Ç—ã –æ–∑–≤—É—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            
            **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
            1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (Base –∏–ª–∏ Accent-tuned)
            2. –í–∫–ª—é—á–∏—Ç–µ/–æ—Ç–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–¥–∞—Ä–µ–Ω–∏—è
            3. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å" - –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏
            4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
            5. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ (—á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –≤ –∞—É–¥–∏–æ)
            6. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (—Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π - –±—É–¥–µ—Ç —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω)
            7. –ù–∞–∂–º–∏—Ç–µ "–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å"
            """)
            
            with gr.Row():
                with gr.Column():
                    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
                    model_choice = gr.Radio(
                        choices=[
                            ("Base Model (F5TTS_v1_Base_v2)", "base"),
                            ("Accent-tuned Model (F5TTS_v1_Base_accent_tune)", "accent")
                        ],
                        value="base",
                        label="ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å TTS",
                        info="Base - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å, Accent-tuned - —É–ª—É—á—à–µ–Ω–Ω–∞—è –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤"
                    )
                    
                    # –í–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞—Ä–µ–Ω–∏–π
                    enable_accent = gr.Checkbox(
                        value=True,
                        label="‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–¥–∞—Ä–µ–Ω–∏—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ",
                        info="–í–∫–ª—é—á–∞–µ—Ç RUAccent –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤"
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
                    load_model_btn = gr.Button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", variant="secondary")
                    
                    # –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
                    model_status = gr.Textbox(
                        label="üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏",
                        value="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å'",
                        lines=4,
                        interactive=False
                    )
                    
                    # –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏
                    with gr.Group():
                        gr.Markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RUAccent
                        accent_model_size = gr.Dropdown(
                            choices=["tiny", "turbo", "turbo2"],
                            value="turbo2",
                            label="üìè –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ RUAccent",
                            info="–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞—Ä–µ–Ω–∏–π (tiny - –±—ã—Å—Ç—Ä–µ–µ, turbo2 - —Ç–æ—á–Ω–µ–µ)"
                        )
                        
                        accent_use_dictionary = gr.Checkbox(
                            value=True,
                            label="üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å RUAccent",
                            info="–í–∫–ª—é—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞—Ä–µ–Ω–∏–π"
                        )
                        
                        accent_tiny_mode = gr.Checkbox(
                            value=False,
                            label="‚ö° Tiny —Ä–µ–∂–∏–º RUAccent",
                            info="–í–∫–ª—é—á–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–π, –Ω–æ –±—ã—Å—Ç—Ä–µ–µ)"
                        )
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ F5-TTS
                        ode_method = gr.Dropdown(
                            choices=["euler", "rk4", "dopri5"],
                            value="euler",
                            label="üî¢ ODE –º–µ—Ç–æ–¥",
                            info="–ú–µ—Ç–æ–¥ —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (euler - –±—ã—Å—Ç—Ä–µ–µ, dopri5 - —Ç–æ—á–Ω–µ–µ)"
                        )
                        
                        use_ema = gr.Checkbox(
                            value=True,
                            label="üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å EMA",
                            info="–í–∫–ª—é—á–∞–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"
                        )
                    
                    # –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ç–µ–∑–∞
                    with gr.Group():
                        gr.Markdown("### üéµ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞")
                        
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞
                        cross_fade_duration = gr.Slider(
                            minimum=0.0,
                            maximum=1.0,
                            value=0.15,
                            step=0.01,
                            label="üîÑ Cross-fade Duration",
                            info="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ (0.0-1.0)"
                        )
                        
                        speed = gr.Slider(
                            minimum=0.5,
                            maximum=2.0,
                            value=1.0,
                            step=0.1,
                            label="‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏",
                            info="–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è (0.5-2.0)"
                        )
                        
                        silence_duration_ms = gr.Slider(
                            minimum=0,
                            maximum=1000,
                            value=200,
                            step=50,
                            label="üîá –¢–∏—à–∏–Ω–∞ –≤ –∫–æ–Ω—Ü–µ (–º—Å)",
                            info="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã –≤ –∫–æ–Ω—Ü–µ –∞—É–¥–∏–æ (0-1000 –º—Å)"
                        )
                    
                    # –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ F5-TTS
                    with gr.Group():
                        gr.Markdown("### üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ F5-TTS")
                        
                        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
                        target_rms = gr.Slider(
                            minimum=0.01,
                            maximum=1.0,
                            value=0.3,
                            step=0.01,
                            label="üìä Target RMS",
                            info="–¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∞—É–¥–∏–æ (0.01-1.0, 0.3 –ª—É—á—à–µ –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–π –º–æ–¥–µ–ª–∏)"
                        )
                        
                        sway_sampling_coef = gr.Slider(
                            minimum=-1,
                            maximum=1,
                            value=-1,
                            step=0.1,
                            label="üåä Sway Sampling",
                            info="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∫–∏ (-1 = –∞–≤—Ç–æ, 0-1 = —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)"
                        )
                        
                        cfg_strength = gr.Slider(
                            minimum=0,
                            maximum=10,
                            value=2,
                            step=0.1,
                            label="üéØ CFG Strength",
                            info="–°–∏–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (0-10)"
                        )
                        
                        nfe_step = gr.Slider(
                            minimum=1,
                            maximum=100,
                            value=32,
                            step=1,
                            label="üî¢ NFE Steps",
                            info="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (1-100)"
                        )
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        fix_duration = gr.Number(
                            value=0,
                            label="‚è±Ô∏è –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)",
                            info="–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 = –∞–≤—Ç–æ)"
                        )
                        
                        remove_silence = gr.Checkbox(
                            value=False,
                            label="üîá –£–¥–∞–ª–∏—Ç—å —Ç–∏—à–∏–Ω—É",
                            info="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å —Ç–∏—à–∏–Ω—É –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ"
                        )
                        
                        seed = gr.Number(
                            value=0,
                            label="üé≤ Seed (—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å)",
                            info="–°–µ–º—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (0 = —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å)"
                        )
                        
                        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º
                        reset_btn = gr.Button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º", variant="secondary")
                    
                    # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ
                    ref_audio = gr.Audio(
                        label="üéµ –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ (–≥–æ–ª–æ—Å –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)",
                        type="filepath"
                    )
                    
                    # –¢–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ
                    ref_text = gr.Textbox(
                        label="üìù –¢–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—Å—è –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–º –∞—É–¥–∏–æ...",
                        lines=3
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    transcribe_btn = gr.Button("üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ", variant="secondary")
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    transcribe_output = gr.Textbox(
                        label="üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
                        lines=4,
                        interactive=False
                    )
                
                with gr.Column():
                    # –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
                    gen_text = gr.Textbox(
                        label="‚úçÔ∏è –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (–ª—é–±–æ–π —è–∑—ã–∫)",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å...",
                        lines=5
                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞
                    synthesize_btn = gr.Button("üéµ –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å", variant="primary")
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ç–µ–∑–∞
                    output_audio = gr.Audio(
                        label="üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ç–µ–∑–∞",
                        type="filepath"
                    )
                    
                    # –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ç–µ–∑–∞
                    status = gr.Textbox(
                        label="üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ç–µ–∑–∞",
                        value="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∞—É–¥–∏–æ",
                        interactive=False
                    )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            load_model_btn.click(
                fn=self.load_tts_model,
                inputs=[model_choice, enable_accent, accent_model_size, accent_use_dictionary, 
                       accent_tiny_mode, ode_method, use_ema],
                outputs=[model_status]
            )
            
            transcribe_btn.click(
                fn=self.transcribe_audio,
                inputs=[ref_audio],
                outputs=[transcribe_output]
            )
            
            synthesize_btn.click(
                fn=self.synthesize_speech,
                inputs=[gen_text, ref_audio, ref_text, model_choice, enable_accent, 
                       cross_fade_duration, speed, silence_duration_ms, target_rms,
                       sway_sampling_coef, cfg_strength, nfe_step, fix_duration,
                       remove_silence, seed],
                outputs=[output_audio, status]
            )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º
            reset_btn.click(
                fn=self.reset_to_defaults,
                outputs=[model_choice, enable_accent, accent_model_size, accent_use_dictionary, 
                        accent_tiny_mode, ode_method, use_ema, cross_fade_duration, speed, silence_duration_ms,
                        target_rms, sway_sampling_coef, cfg_strength, nfe_step, fix_duration,
                        remove_silence, seed]
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            ref_audio.change(
                fn=self.transcribe_audio,
                inputs=[ref_audio],
                outputs=[transcribe_output]
            )
        
        return interface
    
    def launch(self, port=7863, share=False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        interface = self.create_interface()
        
        logger.info("–ó–∞–ø—É—Å–∫ Advanced F5-TTS –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        interface.launch(
            server_port=port,
            share=share,
            show_error=True,
            quiet=False
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        app = AdvancedTTSWebInterface()
        app.launch(port=7863, share=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
